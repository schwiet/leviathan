
package PFK.Chat;

message ProtoVersion {
	required int32 version = 1;
}
message Ping {
	required int32 idle = 1;
	required bool forced = 2;
}
message Login {
	required string username = 1;
	required string password = 2;
}
message LoginToken {
	required string username = 1;
	required string token = 2;
}
message Register {
	required string username = 1;
	required string password = 2;
}
message IM_Message {
	optional string username = 1;
	required string msg = 2;
}
enum TypingState {
	STATE_EMPTY = 1;
	STATE_TYPING = 2;
	STATE_ENTERED_TEXT = 3;
}
message TypingInd {
	required TypingState state = 1;
}
enum ClientToServerType {
	CTS_PROTOVERSION = 1;     // use 'protoversion'
	CTS_PING = 2;             // use 'ping'
	CTS_LOGIN = 3;            // use 'login'
	CTS_LOGIN_TOKEN = 4;      // use 'logintoken'
	CTS_REGISTER = 5;         // use 'register'
	CTS_LOGOUT = 6;           // no arg
	CTS_IM_MESSAGE = 7;       // use 'im'
	CTS_TYPING_IND = 8;       // use 'typing'
}
message ClientToServer {
	required ClientToServerType type = 1;
	optional ProtoVersion protoversion = 2;
	optional Ping ping = 3;
	optional Login login = 4;
	optional LoginToken logintoken = 5;
	optional Register regreq = 6;
	optional IM_Message im = 7;
	optional TypingInd typing = 8;
}


enum ProtoVersionResp {
	PROTO_VERSION_MATCH = 1;
	PROTO_VERSION_MISMATCH = 2;
}
enum LoginStatusValue {
	LOGIN_ACCEPT = 1;
	LOGIN_REJECT = 2;
}
message LoginStatus {
	required LoginStatusValue status = 1;
	optional string token = 2;
}
enum RegisterStatusValue {
	REGISTER_ACCEPT = 1;
	REGISTER_INVALID_USERNAME = 2;
	REGISTER_INVALID_PASSWORD = 3;
	REGISTER_DUPLICATE_USERNAME = 4;
}
message RegisterStatus {
	required RegisterStatusValue status = 1;
	optional string token = 2;
}
message UserInfo {
	required string username = 1;
	required TypingState typing = 2;
	required int32 idle = 3;
}
message UserList {
	repeated UserInfo users = 1;
}
enum UserStatusValue {
	USER_LOGGED_IN = 1;
	USER_LOGGED_OUT = 2;
}
message UserStatus {
	required string username = 1;
	required UserStatusValue status = 2;
}
enum ServerToClientType {
	STC_PROTOVERSION_RESP = 1;  // use protoversionresp
	STC_LOGIN_STATUS = 2;       // use loginStatus
	STC_REGISTER_STATUS = 3;    // use registerStatus
	STC_IM_MESSAGE = 4;         // use 'im'
	STC_USER_LIST = 5;          // use 'userlist'
	STC_USER_STATUS = 6;        // use 'userstatus'
}
message ServerToClient {
	required ServerToClientType type = 1;
	optional ProtoVersionResp protoversionresp = 2;
	optional LoginStatus loginStatus = 3;
	optional RegisterStatus registerStatus = 4;
	optional IM_Message im = 5;
	optional UserList userlist = 6;
	optional UserStatus userstatus = 7;
}
